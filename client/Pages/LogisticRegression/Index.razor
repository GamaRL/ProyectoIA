@page "/algorithms/regression"

@using System;
@using System.Collections.Generic; 

@inject IUploadFileService UploadFileServ;
@inject ILogisticRegressionService RegressionServ;

<Container Fluid Margin="Margin.Is5.FromBottom">
   <h1>Algorithm usage</h1>
   <Row>
     <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12">
       <Div>
         <Field>
           <Select TValue="int" SelectedValueChanged="OnSelectedFileChanged">
             @foreach (var file in uploadedFiles)
            {
              <SelectItem Value="@file.Id">@file.Id - @file.Name</SelectItem>
            }
          </Select>
        </Field>
      </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12">
      <Buttons>
          <Button Clicked="@ShowFeaturesModal" Color="Color.Info" Size="Size.Small"
              Disabled="somethingWentWrong">Dimensions</Button>
          <Button Clicked="@ShowConfigModal" Color="Color.Warning" Size="Size.Small"
              Disabled="somethingWentWrong">Settings</Button>
      </Buttons>
    </Column>
  </Row>
  <Divider DividerType="DividerType.Dotted"></Divider>
  <Row>
    <Column>
      <Heading DisplayHeadingSize="DisplayHeadingSize.Is2">Test new registers</Heading>
    </Column>
  </Row>
  <Row>
    @if (testData != null)
    {
      @foreach (var key in testData.Keys)
      {
        <Column ColumnSize="ColumnSize.Is4">
          <Label>@key</Label>
          <NumericPicker TValue="float" @bind-Value="@testData[key]"/>
        </Column>
      }
    }
  </Row>
  <Row Margin="Margin.Is2.FromTop">
    <Column ColumnSize="ColumnSize.Is4">
      <Button Color="Color.Success" Clicked="@SendRegisterData">Send Data</Button>
    </Column>
  </Row>
  @if(executionResponse != null)
  {
    <Row Margin="Margin.Is2.FromTop">
      <Column ColumnSize="ColumnSize.Is12">
        <Alert Visible Color="Color.Success">
          <AlertMessage>The asigned label was `@executionResponse.Label`</AlertMessage>
          <AlertDescription>With a probability of
              @Math.Max(@executionResponse.Probability0, @executionResponse.Probability1)
          </AlertDescription>
          <CloseButton/>
        </Alert>
      </Column>
    </Row>
  }
</Container>

<Modal @ref="configModalRef">
  <ModalContent Centered Scrollable Size="ModalSize.ExtraLarge">
     <ModalHeader>
       <ModalTitle>Training Parameters</ModalTitle>
       <CloseButton />
     </ModalHeader>
     <ModalBody>
       <Container>
         <h2>Predictor variables</h2>
         <Row>
           <Column>
             <Check TValue="bool" Checked="@containsHeaders"
               CheckedChanged="@OnContainsHeadersChanged">
               Use first row as columns' name?
             </Check>
           </Column>
         </Row>
         <Row Margin="Margin.Is4.FromTop">
           @foreach (var item in predictorHeaders)
          {
            <Column ColumnSize="ColumnSize.Is2.OnDesktop.Is12">
              <Check TValue="bool" Checked="@item.IsSelected"
                CheckedChanged="(value) => OnCheckedChanged(item, value)">
                @item.Header</Check>
            </Column>
          }
        </Row>
        <Divider DividerType="DividerType.Dotted" />
        <h2>Class variable</h2>
        <RadioGroup TValue="string" Name="classHeaders"
          CheckedValue="classVariable" CheckedValueChanged="OnRadioChanged">
          <Row Margin="Margin.Is4.FromTop">
            @if (classHeaders.Count > 0)
            {
              @foreach (var item in classHeaders)
              {
                <Column ColumnSize="ColumnSize.Is2.OnDesktop.Is12">
                  <Radio Value="@item">@item</Radio>
                </Column>
              }
            }
            else
            {
              <Column ColumnSize="ColumnSize.Is12.OnDesktop.Is12">
                <Alert Color="Color.Warning" Visible>
                <AlertMessage>Warning</AlertMessage>
                  <AlertDescription>You must select a class variable
                  </AlertDescription>
                </Alert>
              </Column>
            }
          </Row>
        </RadioGroup>
        <Divider DividerType="DividerType.Dotted" />
        <h2>Additional Options</h2>
        <Row Margin="Margin.Is4.FromTop">
          <Column>
            <Label>Shuffle</Label>
            <RadioGroup TValue="bool" Name="shuffle"
              @bind-CheckedValue="@shuffle">
              <Radio Value="true">Yes</Radio>
              <Radio Value="false">No</Radio>
            </RadioGroup>
          </Column>
        </Row>
        <Row Margin="Margin.Is4.FromTop">
          <Column>
            <Label>Test Size (@testSize %)</Label>
            <Field>
              <Slider @bind-Value="@testSize" Step="1" TValue="float" Min="0" Max="100"/>
            </Field>
          </Column>
        </Row>
        @if (showingInfo && infoResponse != null)
        {
          <Divider DividerType="DividerType.Dotted" />
          <Row>
            <Column ColumnSize="ColumnSize.Is12">
              <Jumbotron Background="Background.Light" Margin="Margin.Is4.FromBottom">
                <Heading Size="HeadingSize.Is3">Information</Heading>

                <Div><b>Accuracy score:</b> @infoResponse.AccuracyScore</Div>
              </Jumbotron>
            </Column>
          </Row>

          <Heading Size="HeadingSize.Is3">Report</Heading>
          <Table Bordered Narrow>
            <TableHeader>
              <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Precision</TableHeaderCell>
                <TableHeaderCell>Recall</TableHeaderCell>
                <TableHeaderCell>F1 Score</TableHeaderCell>
                <TableHeaderCell>Support</TableHeaderCell>
              </TableRow>
            </TableHeader>
            <TableBody>
              @foreach (var item in infoResponse.Report.Keys)
              {
                <TableRow>
                  <TableRowHeader>@item</TableRowHeader>
                  <TableRowCell>@infoResponse.Report[item].Precision</TableRowCell>
                  <TableRowCell>@infoResponse.Report[item].Recall</TableRowCell>
                  <TableRowCell>@infoResponse.Report[item].F1Score</TableRowCell>
                  <TableRowCell>@infoResponse.Report[item].Support</TableRowCell>
                </TableRow>
              }
            </TableBody>
          </Table>

          <Row Margin="Margin.Is4.FromTop">
            <Column>
              <Heading Size="HeadingSize.Is3">ROC</Heading>
              <img src="@rocUrl" alt="Loading..." class="img-fluid">
            </Column>
          </Row>

          <Heading Size="HeadingSize.Is3">Cross Table</Heading>
          <Table Bordered Striped Narrow>
            <TableHeader>
              <TableRow>
                <TableHeaderCell>&</TableHeaderCell>
                @foreach (var variable in infoResponse.CrossTab.Keys.Order())
                {
                  <TableHeaderCell>@variable</TableHeaderCell>
                }
              </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var row in infoResponse.CrossTab.Keys.Order())
                {
                  <TableRow>
                    <TableRowHeader>@row</TableRowHeader>
                    @foreach (var col in infoResponse.CrossTab[row])
                    {
                      <TableRowCell>@col</TableRowCell>
                    }
                  </TableRow>
                }
            </TableBody>
          </Table>
        }
      </Container>
    </ModalBody>
    <ModalFooter>
      <Button Color="Color.Secondary" Clicked="@SaveConfig">Train model</Button>
      <Button Color="Color.Info" Clicked="@GetTrainInfo">Info</Button>
      <Button Color="Color.Danger" Clicked="@HideConfigModal">Close</Button>
    </ModalFooter>
  </ModalContent>
</Modal>

<Modal @ref="featuresModalRef">
  <ModalContent Centered Scrollable Size="ModalSize.ExtraLarge">
     <ModalHeader>
       <ModalTitle>Dimensionality Reduction</ModalTitle>
       <CloseButton />
     </ModalHeader>
     <ModalBody>
             <Container Fluid Margin="Margin.Is4.FromTop">
               <h3>Correlation Analysis</h3>
               @if (correlationAnalysis != null &&
              correlationAnalysis.StrongCorrelations.Count > 0)
              {
                <Alert Color="Color.Warning" Visible>
                 <AlertMessage>Strong correlations were found</AlertMessage>
                 <AlertDescription>
                   <ul>
                     @foreach (var item in
                     correlationAnalysis.StrongCorrelations)
                      {
                        <li>@item[0] - @item[1]</li>
                      }
                    </ul>
                  </AlertDescription>
                </Alert>
              }
              else
              {
                <Alert Color="Color.Success" Visible>
                 <AlertMessage>No strong correlations were found</AlertMessage>
                 <AlertDescription>
                   You can continue!
                 </AlertDescription>
               </Alert>
              }
              <Row>
                <img src="@mapUrl" alt="Loading..." class="img-fluid">
              </Row>
            </Container>
    </ModalBody>
    <ModalFooter>
      <Button Color="Color.Danger" Clicked="@HideFeaturesModal">Close</Button>
    </ModalFooter>
  </ModalContent>
</Modal>

@code {

  private Modal configModalRef = new();
  private Modal featuresModalRef = new();
  private float testSize = 1;
  private bool shuffle = false;
  private string selectedTab = "corr";
  private string mapUrl = "";
  private string rocUrl = "";
  private CorrelationAnalysisResponse correlationAnalysis = null;
  private RegressionInfoResponse infoResponse = null;
  private List<FileModel> uploadedFiles = new();
  private string classVariable;
  private int selectedFileId;
  private List<HeaderSelection> predictorHeaders = new();
  private List<string> classHeaders = new();
  private bool containsHeaders = true;
  private bool somethingWentWrong;
  private Dictionary<string, float> testData = new();
  private RegressionSettingsData settings;
  private RegressionExecutionResponse executionResponse = null;
  private bool showingInfo = false;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    this.uploadedFiles.AddRange(await
    UploadFileServ.GetFiles(AlgorithmType.LOGISTIC_REGRESSION));
    selectedFileId = this.uploadedFiles.First().Id;

    await GetHeaders();
    await OnUpdateParams();
    StateHasChanged();
  }

  private async Task GetSettings()
  {
    try
    {
      settings = await RegressionServ.GetRegressionSettingsData(selectedFileId);
    }
    catch(HttpRequestException) {
      settings = new();
      settings.Id = -1;
      settings.FileId = selectedFileId;
      settings.ContainsHeaders = true;
      settings.PredictorVariables = new();
      settings.ClassVariable = null;
      settings.TestSize = 0.20f;
      settings.Shuffle = true;
    }

    testData.Clear();
    foreach (var variable in settings.PredictorVariables)
    {
      testData.Add(variable.ToString(), 0f);
    }
    StateHasChanged();
  }

  public async Task GetHeaders()
  {
    var data = await UploadFileServ.GetFileHeaders(selectedFileId, containsHeaders,
    AlgorithmType.LOGISTIC_REGRESSION);

    predictorHeaders.Clear();
    foreach (var header in data)
      predictorHeaders.Add(new HeaderSelection(header));
  }

  public async void OnSelectedFileChanged(int value)
  {
    selectedFileId = value;
    await GetHeaders();
    await OnUpdateParams();
    StateHasChanged();
  }

  public async Task OnUpdateParams()
  {
    var cols = predictorHeaders
    .Where<HeaderSelection>(h => h.IsSelected)
    .Select<HeaderSelection, object>(h => h.Header).ToList();
    await GetSettings();
    try
    {
      somethingWentWrong = false;
      this.correlationAnalysis = await
      RegressionServ.GetCorrelationAnalysis(selectedFileId, containsHeaders);
      this.mapUrl = RegressionServ.GetImageUrl(this.correlationAnalysis.MapFileName);
    }
    catch (HttpRequestException ex)
    {
      if (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
      {
        this.correlationAnalysis = null;
        this.mapUrl = "";
        somethingWentWrong = true;
      }
    }
  }

  public async Task OnCheckedChanged(HeaderSelection headerSelection, bool value)
  {
    headerSelection.IsSelected = value;

    await OnUpdateParams();
    StateHasChanged();
  }

  public async Task OnRadioChanged(string value)
  {
    classVariable = value;
    await OnUpdateParams();
    StateHasChanged();
  }

  public async void OnContainsHeadersChanged(bool value)
  {
    containsHeaders = value;
    predictorHeaders.Clear();
    await GetHeaders();
    Console.WriteLine(predictorHeaders.Count);
    if (predictorHeaders.Count > 0)
    {
      await OnUpdateParams();
    }
    else
    {
      somethingWentWrong = true;
    }
    StateHasChanged();
  }
  private void ShowFeaturesModal()
  {
    featuresModalRef.Show();
  }

  private void HideFeaturesModal()
  {
    featuresModalRef.Hide();
  }

  private async void ShowConfigModal()
  {
    showingInfo = false;
    classHeaders.Clear();
    classHeaders = (await RegressionServ.GetValidClassVariables(selectedFileId))
    .Select(h => h.ToString()).ToList();
    shuffle = settings.Shuffle;
    testSize = settings.TestSize * 100;
    var headers = settings.PredictorVariables.Select(p => p.ToString()).ToList();
    predictorHeaders.ForEach(p => {
      string headerName = p.Header.ToString();
      if (headers.Contains(headerName))
      {
        p.IsSelected = true;
      }
      else
      {
        p.IsSelected = false;
        if (settings.ClassVariable != null && settings.ClassVariable.ToString() == headerName)
        {
          classVariable = headerName;
        }
      }
    });
    await configModalRef.Show();
    StateHasChanged();
  }

  private async void SaveConfig()
  {
    RegressionSettingsData settings = new();
    settings.ClassVariable = classVariable;
    settings.ContainsHeaders = containsHeaders;
    settings.FileId = selectedFileId;
    settings.TestSize = testSize / 100;
    settings.Shuffle = shuffle;
    settings.PredictorVariables = predictorHeaders
    .Where<HeaderSelection>(h => h.IsSelected)
    .Select<HeaderSelection, object>(h => h.Header).ToList();

    await RegressionServ.SaveRegressionSettingsData(settings);
    await GetSettings();
  }

  private void HideConfigModal()
  {
    infoResponse = null;
    showingInfo = false;
    configModalRef.Hide();
  }

  private void OnSelectedTabChanged(string name)
  {
    selectedTab = name;
  }

  private async Task GetTrainInfo()
  {
    infoResponse = await RegressionServ.GetRegressionInfo(selectedFileId);
    rocUrl = RegressionServ.GetImageUrl(infoResponse.ROCImageFile);
    showingInfo = true;
    StateHasChanged();
  }

  private async void SendRegisterData()
  {
    executionResponse = await RegressionServ.GetRegressionExecutionResponse(selectedFileId, testData);
    StateHasChanged();
  }
}