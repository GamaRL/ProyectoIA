@using System.Linq;


<Divider DividerType="DividerType.Dotted" />
<Heading Size="HeadingSize.Is3">Centroids</Heading>
<Table Striped Responsive Narrow>
  <TableHeader ThemeContrast="ThemeContrast.Dark">
    <TableRow>
      <TableHeaderCell>#</TableHeaderCell>
      @foreach (var item in Response.First().Properties.Keys)
      {
        <TableHeaderCell>@item</TableHeaderCell>
      }
    </TableRow>
  </TableHeader>
  <TableBody>
    @foreach (var group in GetGroups())
    {
        <TableRow>
          <TableRowHeader>@group</TableRowHeader>
          @foreach (var key in GetAvgGroupValue(group))
          {
            <TableRowCell>@key</TableRowCell>
          }
        </TableRow>
      }
  </TableBody>
</Table>

<Divider DividerType="DividerType.Dotted" />
<Heading Size="HeadingSize.Is3">Details</Heading>
<Accordion>
  @foreach (var group in GetGroups())
  {
    <Collapse>
      <CollapseHeader>
        <Heading Size="HeadingSize.Is4" TextWeight="TextWeight.Bold">
          <AccordionToggle>
            Cluster @group (@GetClusterSize(group) elements)
          </AccordionToggle>
        </Heading>
      </CollapseHeader>
      <CollapseBody>
        <Table Striped Responsive Narrow>
         <TableHeader>
           <TableRow>
             <TableHeaderCell>#</TableHeaderCell>
             @foreach (var item in Response.First().Properties.Keys)
              {
                <TableHeaderCell>@item</TableHeaderCell>
              }
            </TableRow>
          </TableHeader>
          <TableBody>
            @if (GetClusterSize(group) > 6)
            {
              @foreach (var item in GetFirstItemsFromGroup(group))
              {
                <TableRow>
                  <TableRowHeader>@item.Id</TableRowHeader>
                  @foreach (var key in item.Properties.Keys)
                  {
                    <TableRowCell>@item.Properties[key]</TableRowCell>
                  }
                </TableRow>
              }
              <TableRow>
                <TableRowCell
                  ColumnSpan="Response.First().Properties.Keys.Count + 1">
                  ...
                </TableRowCell>
              </TableRow>
              @foreach (var item in GetLastItemsFromGroup(group))
              {
                <TableRow>
                  <TableRowHeader>@item.Id</TableRowHeader>
                  @foreach (var key in item.Properties.Keys)
                  {
                    <TableRowCell>@item.Properties[key]</TableRowCell>
                  }
                </TableRow>
              }
            }
            else
            {
              @foreach (var item in GetFirstItemsFromGroup(group, GetClusterSize(group)))
              {
                <TableRow>
                  <TableRowHeader>@item.Id</TableRowHeader>
                  @foreach (var key in item.Properties.Keys)
                  {
                    <TableRowCell>@item.Properties[key]</TableRowCell>
                  }
                </TableRow>
              }
            }
            <TableRow Color="Color.Info">
              <TableRowHeader>Min</TableRowHeader>
              @foreach (var item in GetMinGroupValue(group))
              {
                <TableRowHeader>@item</TableRowHeader>
              }
            </TableRow>
            <TableRow Color="Color.Info">
              <TableRowHeader>Avg</TableRowHeader>
              @foreach (var item in GetAvgGroupValue(group))
              {
                <TableRowHeader>@item</TableRowHeader>
              }
            </TableRow>
            <TableRow Color="Color.Info">
              <TableRowHeader>Max</TableRowHeader>
              @foreach (var item in GetMaxGroupValue(group))
              {
                <TableRowHeader>@item</TableRowHeader>
              }
            </TableRow>
          </TableBody>
        </Table>
      </CollapseBody>
    </Collapse>
  }
  </Accordion>

  @code {
  [Parameter]
  public List<ClusterResponse> Response { get; set; }

  private List<int> GetGroups()
  {
    return Response
    .Select<ClusterResponse, int>(t => t.Cluster)
    .Distinct()
    .Order()
    .ToList();
  }

  private int GetClusterSize(int cluster)
  {
    return Response
    .Where(r => r.Cluster == cluster)
    .Count();
  }

  private List<ClusterResponse> GetFirstItemsFromGroup(int cluster,
  int n = 3)
  {
    return Response
    .Where(r => r.Cluster == cluster)
    .Take(n)
    .ToList();
  }

  private List<ClusterResponse> GetLastItemsFromGroup(int cluster)
  {
    return Response
    .Where(r => r.Cluster == cluster)
    .Reverse()
    .Take(3)
    .Reverse()
    .ToList();
  }

  private List<float> GetMinGroupValue(int cluster)
  {
    var response = new List<float>();
    var cols = Response.First().Properties.Keys.ToList();

    foreach (var key in cols)
    {
      response.Add(Response
      .Where(r => r.Cluster == cluster)
      .Select<ClusterResponse, float>(r => r.Properties[key])
      .Min());
    }

    return response;
  }

  private List<float> GetMaxGroupValue(int cluster)
  {
    var response = new List<float>();
    var cols = Response.First().Properties.Keys.ToList();

    foreach (var key in cols)
    {
      response.Add(Response
      .Where(r => r.Cluster == cluster)
      .Select<ClusterResponse, float>(r => r.Properties[key])
      .Max());
    }

    return response;
  }

  private List<float> GetAvgGroupValue(int cluster)
  {
    var response = new List<float>();
    var cols = Response.First().Properties.Keys.ToList();

    foreach (var key in cols)
    {
      response.Add(Response
      .Where(r => r.Cluster == cluster)
      .Select<ClusterResponse, float>(r => r.Properties[key])
      .Average());
    }

    return response;
  }
}