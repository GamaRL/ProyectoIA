@page "/algorithms/clustering/partitional"

@using System.Linq;

@inject IUploadFileService UploadFileServ;
@inject IClusteringService ClusteringServ;
@inject NavigationManager NavigationMan;

<Container Fluid Margin="Margin.Is5.FromBottom">
  <h1>Algorithm usage (Partitional)</h1>
  <Row>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12">
      <Div>
        <Field>
          <Select TValue="int" SelectedValueChanged="OnSelectedFileChanged">
          @foreach (var file in uploadedFiles)
          {
            <SelectItem Value="@file.Id">@file.Id - @file.Name</SelectItem>
          }
          </Select>
        </Field>
      </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12">
      <Buttons>
        <Button Clicked="@GetPartitionalClusters" Color="Color.Primary" Size="Size.Small"
          Disabled="somethingWentWrong">Get Clusters</Button>
        <Button Clicked="@ShowModal" Color="Color.Info" Size="Size.Small"
          Disabled="somethingWentWrong">Dimensions</Button>
      </Buttons>
    </Column>
  </Row>
  <Divider DividerType="DividerType.Dotted" />
  <h2>Select columns</h2>
  <Row>
    <Column>
      <Check TValue="bool" Checked="@containsHeaders"
        CheckedChanged="@OnContainsHeadersChanged">
        Use first row as columns' name?
      </Check>
    </Column>
  </Row>
  <Row Margin="Margin.Is4.FromTop">
    @foreach (var item in headers)
    {
      <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is12">
        <Check TValue="bool" Checked="@item.IsSelected"
          CheckedChanged="(value) => OnCheckedChanged(item, value)">@item.Header
        </Check>
      </Column>
    }
  </Row>
  <Divider DividerType="DividerType.Dotted" />
  <h2>Additional Options</h2>
  <Row Margin="Margin.Is4.FromTop">
    <Column>
      <Label>Select a standarization method</Label>
      <RadioGroup TValue="StandarizationMethod" Name="standarization"
        CheckedValue="@standarizationMethod"
        CheckedValueChanged="@OnUpdateStandarization">
        <Radio Value="@StandarizationMethod.SCALER">Scaler</Radio>
        <Radio Value="@StandarizationMethod.NORMALIZER">Normalizer</Radio>
        <Radio Value="@StandarizationMethod.NONE">None</Radio>
      </RadioGroup>
    </Column>
  </Row>
  <Row Flex="Flex.JustifyContent.Center">
    <img src="@partitionalClusterUrl" alt="Loading..." class="img-fluid">
  </Row>
  <Row Margin="Margin.Is4.FromTop">
    <Column>
      <Label>No. Clusters: @noClusters</Label>
      <Field>
        <Slider @bind-Value="@noClusters" Step="1" TValue="int" Min="2" Max="10"/>
      </Field>
    </Column>
  </Row>
  @if(clusterResponse != null)
  {
    <h2>Found Clusters</h2>
    <ClusterSummary Response="clusterResponse"/>
  }
  @if (somethingWentWrong)
  {
    <Alert Color="Color.Warning" Visible>
     <AlertMessage>
       Warning
     </AlertMessage>
     <AlertDescription>
       Check the selected colums. This module only works with numeric fields.
     </AlertDescription>
   </Alert>
  }

  <Modal @ref="modalRef">
    <ModalContent Centered Scrollable Size="ModalSize.ExtraLarge">
       <ModalHeader>
         <ModalTitle>Dimensionality Reduction</ModalTitle>
         <CloseButton />
       </ModalHeader>
       <ModalBody>
               <Container Fluid Margin="Margin.Is4.FromTop">
                 <h3>Correlation Analysis</h3>
                 @if(correlationAnalysis != null && correlationAnalysis.StrongCorrelations.Count > 0)
                 {
                  <Alert Color="Color.Warning" Visible>
                    <AlertMessage>Strong correlations were found</AlertMessage>
                    <AlertDescription>
                    <ul>
                      @foreach (var item in correlationAnalysis.StrongCorrelations)
                      {
                        <li>@item[0] - @item[1]</li>
                      }
                    </ul>
                    </AlertDescription>
                  </Alert>
                 }
                 else
                 {
                  <Alert Color="Color.Success" Visible>
                    <AlertMessage>No strong correlations were found</AlertMessage>
                    <AlertDescription>
                      You can continue!
                    </AlertDescription>
                  </Alert>
                 }
                <Row>
                  <img src="@mapUrl" alt="Loading..." class="img-fluid">
                </Row>
              </Container>
      </ModalBody>
      <ModalFooter>
        <Button Color="Color.Danger" Clicked="@HideModal">Close</Button>
      </ModalFooter>
    </ModalContent>
  </Modal>
</Container>

@code {
  private List<FileModel> uploadedFiles = new();
  private int selectedFileId;
  private List<HeaderSelection> headers = new();
  private bool containsHeaders = true;
  private StandarizationMethod standarizationMethod = StandarizationMethod.SCALER;
  private DistanceMetric distanceMetric = DistanceMetric.EUCLIDEAN;
  private bool somethingWentWrong = false;
  private Modal modalRef = new();
  private string selectedTab = "corr";
  private CorrelationAnalysisResponse correlationAnalysis = null;
  private string mapUrl = "";
  private List<ClusterResponse> clusterResponse;
  private string partitionalClusterUrl = "";
  private int noClusters = 2;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    this.uploadedFiles.AddRange(await
    UploadFileServ.GetFiles(AlgorithmType.CLUSTERING));
    selectedFileId = this.uploadedFiles.First().Id;

    await GetHeaders();
    await OnUpdateParams();

    StateHasChanged();
  }

  public async Task GetPartitionalClusters()
  {
    var cols = headers
    .Where<HeaderSelection>(h => h.IsSelected)
    .Select<HeaderSelection, object>(h => h.Header).ToList();
    this.clusterResponse = await ClusteringServ.GetPartitionalClusters(selectedFileId, containsHeaders, cols, standarizationMethod, distanceMetric, noClusters);
    StateHasChanged();
  }

  public async Task GetHeaders()
  {
    var data = await UploadFileServ.GetFileHeaders(selectedFileId, containsHeaders,
    AlgorithmType.CLUSTERING);

    headers.Clear();
    foreach (var header in data)
      headers.Add(new HeaderSelection(header));
  }

  public async void OnSelectedFileChanged(int value)
  {
    selectedFileId = value;
    await GetHeaders();
    await OnUpdateParams();

    StateHasChanged();
  }

  public async void OnContainsHeadersChanged(bool value)
  {
    containsHeaders = value;
    headers.Clear();
    await GetHeaders();
    await OnUpdateParams();
    StateHasChanged();
  }

  public async Task OnCheckedChanged(HeaderSelection headerSelection, bool value)
  {
    headerSelection.IsSelected = value;
    await OnUpdateParams();
    StateHasChanged();
  }

  public async Task OnUpdateStandarization(StandarizationMethod value)
  {
    standarizationMethod = value;
    await OnUpdateParams();
    StateHasChanged();
  }

  public async Task OnUpdateMetric(DistanceMetric value)
  {
    distanceMetric = value;
    await OnUpdateParams();
    StateHasChanged();
  }

  public void ExportData()
  {
    var cols = headers
    .Where<HeaderSelection>(h => h.IsSelected)
    .Select<HeaderSelection, object>(h => h.Header).ToList();
    @* string path = DistancesServ.GetDistancesRequestUrl(selectedFileId, true,
containsHeaders, cols, distanceMetric, standarizationMethod); *@
    @* NavigationMan.NavigateTo(path); *@
  }

  public async Task OnUpdateParams()
  {
    var cols = headers
    .Where<HeaderSelection>(h => h.IsSelected)
    .Select<HeaderSelection, object>(h => h.Header).ToList();
    try
    {
      somethingWentWrong = false;
      this.partitionalClusterUrl = "";
      this.correlationAnalysis = await ClusteringServ.GetCorrelationAnalysis(selectedFileId, containsHeaders);
      this.mapUrl = ClusteringServ.GetImageUrl(this.correlationAnalysis.MapFileName);
      this.partitionalClusterUrl = ClusteringServ.GetImageUrl(await ClusteringServ.GetPartitionalClustersImg(selectedFileId, containsHeaders, cols, standarizationMethod, distanceMetric));
    }
    catch (HttpRequestException ex)
    {
      if (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
      {
        this.correlationAnalysis = null;
        this.mapUrl = "";
        this.partitionalClusterUrl = "";
        somethingWentWrong = true;
      }
    }
  }

  private void ShowModal()
  {
    modalRef.Show();
  }

  private void HideModal()
  {
    modalRef.Hide();
  }

  private void OnSelectedTabChanged(string name)
  {
    selectedTab = name;
  }
}