@page "/algorithms/distances"
@using System.Linq;

@inject IUploadFileService UploadFileServ;

<Container Fluid Margin="Margin.Is5.FromBottom">
  <h1>Algorithm usage</h1>
  <Row>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12">
      <Div>
        <Field>
          <Select TValue="int" SelectedValueChanged="OnSelectedFileChanged">
            @foreach (var file in uploadedFiles)
            {
              <SelectItem Value="@file.Id">@file.Id - @file.Name</SelectItem>
            }
          </Select>
        </Field>
      </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12">
      <Buttons>
        @* <Button Clicked="@GetFrequencies" Color="Color.Info" Size="Size.Small">Frequencies</Button> *@
        <Button Clicked="@GetDistances" Color="Color.Primary" Size="Size.Small">Get Distances</Button>
        @* <Button Clicked="@SaveAssociationRules" Color="Color.Success" Size="Size.Small"> *@
          @* Save Rules</Button> *@
      </Buttons>
    </Column>
  </Row>
  <Divider DividerType="DividerType.Dotted"/>
  <h2>Select columns</h2>
  <Row>
    <Column>
      <Check TValue="bool" Checked="@containsHeaders" CheckedChanged="@OnContainsHeadersChanged">
        Use first row as columns' name?
      </Check>
    </Column>
  </Row>
  <Row Margin="Margin.Is4.FromTop">
    @foreach (var item in headers)
    {
      <Column ColumnSize="ColumnSize.Is2.OnDesktop.Is12">
        <Check TValue="bool" Checked="@item.IsSelected" CheckedChanged="(value) => OnCheckedChanged(item, value)">@item.Header</Check>
      </Column>
    }
  </Row>
  @if (fileContent != null)
  {
    <Row Margin="Margin.Is4.FromTop">
      <Column ColumnSize="ColumnSize.Is12" Margin="Margin.Is0">
        <Table Narrow>
        <TableHeader>
          <TableRow>
            @foreach (var item in fileContent.Headers)
              {
                <TableHeaderCell>@item</TableHeaderCell>
              }
            </TableRow>
          </TableHeader>
          <TableBody>
            @foreach (var headItem in fileContent.Head)
            {
              <TableRow>
                @foreach (var item in headItem)
                {
                  <TableRowCell>@item</TableRowCell>
                }
              </TableRow>
            }
            <TableRow>
              <TableRowCell ColumnSpan="@fileContent.Headers.Count">...
              </TableRowCell>
            </TableRow>
            @foreach (var tailItem in fileContent.Tail)
            {
              <TableRow>
                @foreach (var item in tailItem)
                {
                  <TableRowCell>@item</TableRowCell>
                }
              </TableRow>
            }
          </TableBody>
        </Table>
      </Column>
    </Row>
    <Divider DividerType="DividerType.Dotted"/>
    <h2>Additional Options</h2>
    <Row>
      <Column>
        <Label>Select a standarization method</Label>
        <Select TValue="StandarizationMethod" @bind-SelectedValue="standarizationMethod">
          <SelectItem Value="@StandarizationMethod.NONE">None</SelectItem>
          <SelectItem Value="@StandarizationMethod.SCALER">Scaler</SelectItem>
          <SelectItem Value="@StandarizationMethod.NORMALIZER">Normalizer</SelectItem>
        </Select>
      </Column>
    </Row>
  }
  </Container>

  @code {
  private List<FileModel> uploadedFiles = new();
  private int selectedFileId;
  private List<HeaderSelection> headers = new();
  private bool containsHeaders = true;
  private FileContentModel fileContent = null;
  private StandarizationMethod standarizationMethod = StandarizationMethod.NONE;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    this.uploadedFiles.AddRange(await
    UploadFileServ.GetFiles(AlgorithmType.DISTANCES));
    selectedFileId = this.uploadedFiles.First().Id;

    await GetHeaders();
    await OnUpdateParams();
    StateHasChanged();
  }

  public void GetDistances()
  {
    Console.WriteLine("Trayendo las distancias");
  }

  public async Task GetHeaders()
  {
    var data = await UploadFileServ.GetFileHeaders(selectedFileId, containsHeaders,
    AlgorithmType.DISTANCES);

    headers.Clear();
    @foreach (var header in data)
      headers.Add(new HeaderSelection(header));
  }

  public async void OnSelectedFileChanged(int value)
  {
    selectedFileId = value;
    await GetHeaders();
    await OnUpdateParams();
    StateHasChanged();
  }

  public async void OnContainsHeadersChanged(bool value)
  {
    containsHeaders = value;
    await GetHeaders();
    await OnUpdateParams();
    StateHasChanged();
  }

  public async Task OnUpdateParams()
  {
    var cols = headers.Where<HeaderSelection>(h =>
    h.IsSelected).Select<HeaderSelection, object>(h => h.Header).ToList();
    fileContent = await UploadFileServ.GetFileContentWithHeaders(selectedFileId,
    containsHeaders, cols, AlgorithmType.DISTANCES);
  }

  public async Task OnCheckedChanged(HeaderSelection headerSelection, bool value)
  {
    headerSelection.IsSelected = value;
    await OnUpdateParams();
    StateHasChanged();
  }
}