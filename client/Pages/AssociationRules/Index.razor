@page "/algorithms/association-rules"

@inject IJSRuntime JsRuntime;
@inject IAssociationRulesService AssociationRulesServ;
@inject IUploadFileService UploadFileServ;

<Container Fluid>
  <h1>Algorithm usage</h1>
  <Row>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12">
      <Div>
        <Field>
          <Select TValue="int" @bind-SelectedValue="@selectedFileId">
            @foreach (var file in uploadedFiles)
            {
              <SelectItem Value="@file.Id">@file.Id - @file.Name</SelectItem>
            }
          </Select>
        </Field>
      </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12">
      <Buttons>
        <Button Clicked="@GetFrequencies" Color="Color.Info" Size="Size.Small">Frequencies</Button>
        <Button Clicked="@GetAssociationRules" Color="Color.Primary" Size="Size.Small">Get
          Rules</Button>
        <Button Clicked="@SaveAssociationRules" Color="Color.Success" Size="Size.Small">
          Save Rules</Button>
      </Buttons>
    </Column>
  </Row>
  <Row Margin="Margin.Is4">
    <Column ColumnSize="ColumnSize.Is4.OnMobile.Is12">
      Support: @minSupport %
      <Field>
        <Slider @bind-Value="@minSupport" Step="0.5f" TValue="float" Min="1" Max="10"/>
      </Field>
    </Column>
    <Column ColumnSize="ColumnSize.Is4.OnMobile.Is12">
      Confidence: @minConfidence %
      <Field>
        <Slider @bind-Value="@minConfidence" Step="1" TValue="float" Min="1" Max="100" />
      </Field>
    </Column>
    <Column ColumnSize="ColumnSize.Is4.OnMobile.Is12">
      Lift: @minLift
      <Field>
        <Slider @bind-Value="@minLift" Step="1" TValue="float" Min="1" Max="10" />
      </Field>
    </Column>
  </Row>
  @if (rules.Count > 0)
  {
    <AssociationRulesTable rules="rules"/>
  }
  <Row>
    <Column ColumnSize="ColumnSize.Is12" Margin="Margin.Is0">
      <Div id="chart_div"></Div>
    </Column>
  </Row>
</Container>

@code {
  private List<FileModel> uploadedFiles = new();
  private List<FrequencyAnalysisResponse> frequencies = new();
  private List<AssociationRulesResponse> rules = new();
  private int selectedFileId;

  private float minConfidence = 1f, minSupport = 1f, minLift = 2f;

  protected override async Task OnInitializedAsync()
  {
    this.uploadedFiles.AddRange(await UploadFileServ.GetFiles(AlgorithmType.APRIORI));
    selectedFileId = this.uploadedFiles.First().Id;

    await base.OnInitializedAsync();
    StateHasChanged();
  }

  private async void GetFrequencies()
  {
    this.frequencies.Clear();
    var response = await this.AssociationRulesServ.GetFrequencies(selectedFileId);
    this.frequencies.AddRange(response);

    await JsRuntime.InvokeVoidAsync("createPlot", this.frequencies);
    StateHasChanged();
  }

  private async void GetAssociationRules()
  {
    this.rules.Clear();
    var response = await AssociationRulesServ.GetAssociationRules(selectedFileId,
    minSupport / 100, minConfidence / 100, minLift + 0.01f);

    this.rules.AddRange(response);
    StateHasChanged();
  }

  private void SaveAssociationRules()
  {
    this.AssociationRulesServ.SaveRules(selectedFileId, rules);
  }
}